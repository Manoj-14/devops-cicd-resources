def COLOR_MAP = [
    'SUCCESS': 'good',
    "FAILURE": 'danger',
]

pipeline{
    agent any
    //global level enviranment var
    tools {
        maven "MAVEN3.9" // you will get it in tools of jenkins
        jdk "JDK17"
    }

    stages{
        stage("Fetch code") {
            steps { //inside mention plugin name
                git branch : 'atom' ,url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }
        stage("Build") {
            steps { //Shell cmd
                sh 'mvn install -DskipTests' //skip the test
            }
            post { //post step
                success{ //if success
                    echo "Archiving artifact"
                    archiveArtifacts artifacts: '**/*.war' //plugin name with regex to search .war file in workspace
                }
            }
        }
        stage("Unit test") {
            steps { //Shell cmd
                sh 'mvn test'
            }
        }
        stage("Checkstyle Analysis") {
            steps { //Shell cmd
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('Sonar Code analysis') {
            //stage level enviranment var
            environment{
                scannerHome = tool 'SONAR6.2' //tool name
            }
            steps {
                withSonarQubeEnv('sonarserver') {
                    //multiline cmds
                    // make sure no space after \
                    sh '''
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile-repo \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src \
                    -Dsonar.java.binaries=target \
                    -Dsonar.junit.reportsPath=target/surefire-reports \
                    -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }
        // stage for Quality Gate of SonarQube
        stage("Quality Gate"){
            steps {
                timeout(time:1,unit:'HOURS'){
                    waitForQualityGate abortPipeline: true //wait until you get status from sonarqube quality gate webhook (need to setup sirst in sonarqube project)
                }
            }
        }

        stage("Upload artifact"){
            steps{
                    nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '172.31.25.93:8081', //private IP of nexus instance (no need of http because it already mentioned above in protocol)
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'vprofile-repo',
                    credentialsId: 'nexuslogin',
                    artifacts: [
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war', //path of artifact
                        type: 'war']
                    ]
                )
            }
        }
    }

    post {
        always {
            echo 'Slack Notification.'
            slackSend channel: '#pipeline-notification',
            color: COLOR_MAP[currentBuild.currentResult], //will recive good or danger as defined in above(line 1) function
            message: "${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}"
        }
    }
}